#!/usr/bin/env python
# -*- coding: utf-8 -*-

Import('env')

from util import match_patterns, minifiables, filter_files
from fnmatch import fnmatch
from os.path import basename
from filesystem import walk_dir

SRC_DIR = './'
DEST_DIR = '../' + env['MEDIA_DEST_DIR'] + '/'

SCRIPT_FILES = Split("""
    script/lib/chickoojs/src/jquery/jquery-1.3.2.js
    script/lib/chickoojs/src/jquery/tools/1.1.2/jquery.tools.min.js
    script/base.js
""")

IMAGE_FILES = Split("""
    image/logo/logo-trans.png
    image/logo/text.en_US-trans.png
    image/logo/note.png
    image/logo/home_glass.png
    image/logo/ship_model.png
    image/logo/ship_side.png
    image/logo/mohini.png
    image/logo/drill_new.png
    image/logo/safety_helmet.png
    image/logo/phone.png
    image/bg/vertical-trans.png
    image/icon/favicon.png
    image/icon/ship_model.png
    image/icon/safety_helmet.png
    image/icon/mohini.png
    image/icon/ship_side.png
    image/icon/drill_new.png
    image/icon/onshore_professional.png
    image/button/take_tour.png
    image/button/send_resume_glossy-trans.png
    image/photo/career/1.jpg
    image/photo/career/2.jpg
    image/photo/career/3.jpg
    image/photo/career/4.jpg
    image/photo/career/5.jpg
    image/photo/career/6.jpg
    image/photo/career/7.jpg
    image/photo/career/8.jpg
    image/photo/career/9.jpg
    image/photo/career/10.jpg
    image/photo/career/11.jpg
    image/photo/career/12.jpg
    image/photo/career/13.jpg
    image/photo/career/14.jpg
    image/photo/career/15.jpg
    image/photo/career/16.jpg
    image/photo/career/18.jpg
    image/photo/career/19.jpg
    image/photo/career/20.jpg
    image/photo/career/22.jpg
    image/photo/career/23.jpg
    image/photo/career/24.jpg
    image/photo/career/25.jpg
    image/photo/career/26.jpg
    image/photo/career/27.jpg
    image/photo/career/29.jpg
    image/photo/career/30.jpg
    image/photo/career/31.jpg
    image/photo/career/32.jpg
    image/photo/career/thumbs/1.jpg
    image/photo/career/thumbs/2.jpg
    image/photo/career/thumbs/3.jpg
    image/photo/career/thumbs/4.jpg
    image/photo/career/thumbs/5.jpg
    image/photo/career/thumbs/6.jpg
    image/photo/career/thumbs/7.jpg
    image/photo/career/thumbs/8.jpg
    image/photo/career/thumbs/9.jpg
    image/photo/career/thumbs/10.jpg
    image/photo/career/thumbs/11.jpg
    image/photo/career/thumbs/12.jpg
    image/photo/career/thumbs/13.jpg
    image/photo/career/thumbs/14.jpg
    image/photo/career/thumbs/15.jpg
    image/photo/career/thumbs/16.jpg
    image/photo/career/thumbs/18.jpg
    image/photo/career/thumbs/19.jpg
    image/photo/career/thumbs/20.jpg
    image/photo/career/thumbs/22.jpg
    image/photo/career/thumbs/23.jpg
    image/photo/career/thumbs/24.jpg
    image/photo/career/thumbs/25.jpg
    image/photo/career/thumbs/26.jpg
    image/photo/career/thumbs/27.jpg
    image/photo/career/thumbs/29.jpg
    image/photo/career/thumbs/30.jpg
    image/photo/career/thumbs/31.jpg
    image/photo/career/thumbs/32.jpg
""")

CSS_FILES = Split("""
    css/screen.css
""")

# Do not include IMAGE files in here.
# Please include them in IMAGE_FILES above.
# If you would like images to be copied "as is" without
# any optimizations, then you may include them here.
PLAIN_COPIES = SCRIPT_FILES + CSS_FILES + Split("""
    robots.txt
""")

PLAIN_COPY_DIRECTORIES = Split("""

""")

# Recursively add all the files in the directories to files to copy.
for directory in set(PLAIN_COPY_DIRECTORIES):
    files = [f[len(SRC_DIR):] for f in walk_dir(SRC_DIR + directory)]
    PLAIN_COPIES.extend(files)

# Plain copies.
for f in set(PLAIN_COPIES):
    env.Command(DEST_DIR + f, SRC_DIR + f, Copy("$TARGET", "$SOURCE"))

# Optimize graphics
# This isn't working at the moment.
#for f in filter_files(IMAGE_FILES, allow_patterns=['*.png']):
#    env.OptimizePNG(DEST_DIR + f, SRC_DIR + f)
#for f in filter_files(IMAGE_FILES, allow_patterns=['*.jpg, *.jpeg']):
#    env.OptimizeJPEG(DEST_DIR + f, SRC_DIR + f)
for f in IMAGE_FILES:
    filename = str(f)
    if match_patterns(filename, patterns=['*.png']):
        env.OptimizePNG(DEST_DIR + f, SRC_DIR + f)
    elif match_patterns(filename, patterns=['*.jpg', '*.jpeg']):
        env.OptimizeJPEG(DEST_DIR + f, SRC_DIR + f)
    else:
        env.Command(DEST_DIR + f, SRC_DIR + f, Copy("$TARGET", "$SOURCE"))

# Stitching graphics together
# env.HStitchImages(DEST_DIR + 'image/filename.png', [SRC_DIR + f for f in Split("""
#       image/file1.png
#       image/file2.png
#     """)])

# Minification of the generated CSS and JS files.
MINIFIABLE_FILES = SCRIPT_FILES + CSS_FILES + Split("""

""")

# Exclude these files specifically from minification.
NON_MINIFIABLE_FILES = Split("""

""")


# Don't minify all files in one command.  Minify them separately.
# It keeps build times small.
for f in minifiables(MINIFIABLE_FILES, NON_MINIFIABLE_FILES):
    filepath = DEST_DIR + str(f)
    env.YuiCompressorMinify(filepath)
    #if fnmatch(basename(filepath), '*.js'):
    #    env.JsminMinify(filepath)

# Combine these JavaScript files and create a common js.
#
# Warning:  THE ORDER MATTERS.
#
page_base_js = env.Concatenate([DEST_DIR + 'script/page/base.js'], [SRC_DIR + f for f in Split("""
    script/base.js
    """)])
env.YuiCompressorMinify(page_base_js)

# Include licenses.
#c3 = env.Concatenate([DEST_DIR + 'script/lib/all-min.js'], [
#    DEST_DIR + 'script/LICENSES',
#    DEST_DIR + 'script/lib/all_o-min.js',
#])

